---
services:
  postgresql_authentik:
    container_name: authentik-db
    image: docker.io/library/postgres:16-alpine
    restart: unless-stopped
    ulimits:
      nofile:
        soft: 10240
        hard: 10240
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    env_file:
      - .env
    volumes:
      - /root/Server/.config/authentik/database:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${PG_PASS}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_DB: ${PG_DB}
    labels:
      - com.centurylinklabs.watchtower.enable=true
      
  redis_authentik:
    container_name: authentik-redis
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis:/data
    labels:
      - com.centurylinklabs.watchtower.enable=true
      
  server_authentik:
    container_name: authentik-server
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.8}
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis_authentik
      AUTHENTIK_POSTGRESQL__HOST: postgresql_authentik
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      PUID: ${PUID_DOCKERUSER}
      PGID: ${PGID_DOCKERGROUP}
    volumes:
      - /root/Server/.config/authentik/server/media:/media
      - /root/Server/.config/authentik/server/custom-templates:/templates
    env_file:
      - .env
    ports:
      - "${COMPOSE_PORT_HTTP:-9000}:9000"
      - "${COMPOSE_PORT_HTTPS:-9444}:9443"
    depends_on:
      postgresql_authentik:
        condition: service_healthy
      redis_authentik:
        condition: service_healthy
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - homepage.group=Services
      - homepage.name=Authentik
      - homepage.icon=authentik.png
      - homepage.href=[EXTERNAL URL]
      - homepage.description=Authentication
      - homepage.widget.type=authentik
      - homepage.widget.url=[INTERNAL IP]
      - homepage.widget.key=[API KEY]

  worker_authentik:
    container_name: authentik-worker
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.8}
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis_authentik
      AUTHENTIK_POSTGRESQL__HOST: postgresql_authentik
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /root/Server/.config/authentik/worker/media:/media
      - /root/Server/.config/authentik/worker/certs:/certs
      - /root/Server/.config/authentik/worker/custom-templates:/templates
    env_file:
      - .env
    depends_on:
      postgresql_authentik:
        condition: service_healthy
      redis_authentik:
        condition: service_healthy
    labels:
      - com.centurylinklabs.watchtower.enable=true

volumes:
  database:
    driver: local
  redis:
    driver: local